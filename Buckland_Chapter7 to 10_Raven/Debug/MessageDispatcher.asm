; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Romain S\Documents\Workspace\workspace_ia\tp3ia\Common\Messaging\MessageDispatcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
CONST	SEGMENT
_pi	DQ	0400921f9f01b866er		; 3.14159
_SmallestDelay DQ 03fd0000000000000r		; 0.25
_Pi	DQ	0400921f9f01b866er		; 3.14159
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0Telegram@@QAE@NHHHPAX@Z			; Telegram::Telegram
PUBLIC	??8@YA_NABUTelegram@@0@Z			; operator==
PUBLIC	??M@YA_NABUTelegram@@0@Z			; operator<
PUBLIC	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
PUBLIC	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
PUBLIC	??0?$allocator@UTelegram@@@std@@QAE@XZ		; std::allocator<Telegram>::allocator<Telegram>
PUBLIC	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<Telegram,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
PUBLIC	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
PUBLIC	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
PUBLIC	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
PUBLIC	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
PUBLIC	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
PUBLIC	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
PUBLIC	??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::~_Tree_val<std::_Tree_simple_types<Telegram> >
PUBLIC	??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >
PUBLIC	??1?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::~_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >
PUBLIC	?_Alloc_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Free_proxy
PUBLIC	?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Freeheadnode
PUBLIC	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
PUBLIC	??0?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Tree_buy<Telegram,std::allocator<Telegram> >
PUBLIC	?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Freenode0
PUBLIC	??1?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::~_Tree_buy<Telegram,std::allocator<Telegram> >
PUBLIC	??0?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
PUBLIC	??1?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
PUBLIC	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
PUBLIC	?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil
PUBLIC	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase
PUBLIC	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate
PUBLIC	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
PUBLIC	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate
PUBLIC	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr
PUBLIC	?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy
PUBLIC	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
PUBLIC	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::insert
PUBLIC	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge
PUBLIC	??0MessageDispatcher@@AAE@XZ			; MessageDispatcher::MessageDispatcher
PUBLIC	?Instance@MessageDispatcher@@SAPAV1@XZ		; MessageDispatcher::Instance
PUBLIC	?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z	; MessageDispatcher::DispatchMsg
PUBLIC	?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ; MessageDispatcher::DispatchDelayedMessages
PUBLIC	??1MessageDispatcher@@QAE@XZ			; MessageDispatcher::~MessageDispatcher
PUBLIC	?GetCurrentFrame@FrameCounter@@QAEJXZ		; FrameCounter::GetCurrentFrame
PUBLIC	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::~_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
PUBLIC	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
PUBLIC	??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
PUBLIC	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Nil>
PUBLIC	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > > >
PUBLIC	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Allocate@U?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_Tree_node<Telegram,void *> >
PUBLIC	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
PUBLIC	??$destroy@UTelegram@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>
PUBLIC	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
PUBLIC	??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>
PUBLIC	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$destroy@UTelegram@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<Telegram>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$_Buynode_if_nil@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Nil@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode_if_nil<Telegram const &>
PUBLIC	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
PUBLIC	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode<Telegram const &>
PUBLIC	??$construct@UTelegram@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
PUBLIC	??$construct@UTelegram@@ABU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@ABU3@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
PUBLIC	??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<Telegram,Telegram const &>
PUBLIC	??_C@_1IE@MKNBBMEP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_1IC@HLKMDAOL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?id@?$codecvt@DDH@std@@2V0locale@2@A		; std::codecvt<char,char,int>::id
PUBLIC	??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ ; `string'
PUBLIC	??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_fabs:PROC
EXTRN	_memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?Instance@FrameCounter@@SAPAV1@XZ:PROC		; FrameCounter::Instance
EXTRN	?Instance@EntityManager@@SAPAV1@XZ:PROC		; EntityManager::Instance
EXTRN	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z:PROC ; EntityManager::GetEntityFromID
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
__Nil_obj DB	01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_MaxInt	DD	01H DUP (?)
_MaxDouble DQ	01H DUP (?)
_MinDouble DQ	01H DUP (?)
_MaxFloat DD	01H DUP (?)
_MinFloat DD	01H DUP (?)
_TwoPi	DQ	01H DUP (?)
_HalfPi	DQ	01H DUP (?)
_QuarterPi DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
_BSS	SEGMENT
?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A DB 0cH DUP (?) ; `MessageDispatcher::Instance'::`2'::instance
_BSS	ENDS
;	COMDAT ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA
_BSS	SEGMENT
?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA DD 01H DUP (?) ; `MessageDispatcher::Instance'::`2'::$S1
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$codecvt@DDH@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$codecvt@DDH@std@@2V0locale@2@A DD 01H DUP (?)	; std::codecvt<char,char,int>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-038
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '-', 00H, '-', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
CONST	SEGMENT
??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '1', 00H, '1', 00H, '.', 00H, '0', 00H, '\', 00H
	DB	'V', 00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@HLKMDAOL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1IC@HLKMDAOL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '1', 00H, '1', 00H, '.', 00H, '0', 00H, '\', 00H
	DB	'V', 00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IE@MKNBBMEP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1IE@MKNBBMEP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '1', 00H, '1', 00H, '.', 00H, '0', 00H, '\', 00H
	DB	'V', 00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z$0
__ehfuncinfo$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$0
__unwindtable$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$2
__ehfuncinfo$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z$0
__ehfuncinfo$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z$0
__ehfuncinfo$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$0
__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z DD 00H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$12
__ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$10
	DD	03H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$11
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z$0
__ehfuncinfo$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0
__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2
__ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z$0
__ehfuncinfo$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z$0
__ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$3
__ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z$0
__ehfuncinfo$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0
__unwindtable$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2
__ehfuncinfo$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0
__unwindtable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2
__ehfuncinfo$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$0
__tryblocktable$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$3
__unwindtable$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_MaxInt$initializer$ DD FLAT:??__EMaxInt@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_MaxDouble$initializer$ DD FLAT:??__EMaxDouble@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_MinDouble$initializer$ DD FLAT:??__EMinDouble@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_MaxFloat$initializer$ DD FLAT:??__EMaxFloat@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_MinFloat$initializer$ DD FLAT:??__EMinFloat@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_TwoPi$initializer$ DD FLAT:??__ETwoPi@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_HalfPi$initializer$ DD FLAT:??__EHalfPi@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_QuarterPi$initializer$ DD FLAT:??__EQuarterPi@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$codecvt@DDH@std@@2P6AXXZA DD FLAT:??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ ; std::codecvt<char,char,int>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<Telegram,Telegram const &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<Telegram,Telegram const &>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@UTelegram@@ABU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@UTelegram@@ABU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UTelegram@@ABU1@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<Telegram,Telegram const &>
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@UTelegram@@ABU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@UTelegram@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@UTelegram@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UTelegram@@ABU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@ABU3@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
	add	esp, 12					; 0000000cH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UTelegram@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
_TEXT	SEGMENT
tv93 = -40						; size = 4
tv92 = -36						; size = 4
tv91 = -32						; size = 4
$T2 = -25						; size = 1
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__V0$ = 8						; size = 4
??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z PROC ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode<Telegram const &>, COMDAT
; _this$ = ecx

; 945  : _VARIADIC_EXPAND_0X(_TREE_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	mov	BYTE PTR [eax], 0
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	DWORD PTR tv91[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv92[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv93[ebp], eax
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv93[ebp]
	call	??$construct@UTelegram@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$0:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Freenode0
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ENDP ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode<Telegram const &>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<std::_Tree_node<Telegram,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Nil@1@ABUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val$ = 12						; size = 4
??$_Buynode_if_nil@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Nil@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode_if_nil<Telegram const &>, COMDAT
; _this$ = ecx

; 1645 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1646 : 		{	// node doesn't exist, make it
; 1647 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABUTelegram@@@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode<Telegram const &>

; 1648 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Buynode_if_nil@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Nil@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode_if_nil<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::codecvt<char,char,int>::id'', COMDAT

; 970  : 	__PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$codecvt@DDH@std@@2V0locale@2@A ; std::codecvt<char,char,int>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::codecvt<char,char,int>::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@UTelegram@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UTelegram@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<Telegram>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UTelegram@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 256  : 	__PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 256  : 	__PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1569 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 1569 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 1569 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<Telegram,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<std::_Tree_node<Telegram,void *> *>

; 758  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 758  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool>, COMDAT
; _this$ = ecx

; 138  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 139  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 4
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>, COMDAT
; _this$ = ecx

; 138  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 139  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Pnode$2 = -12						; size = 4
__Newnode$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 1
??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>, COMDAT
; _this$ = ecx

; 1836 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1837 : 		_Valty&& _Val, _Nodety _Node)
; 1838 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1839 : 		if (max_size() - 1 <= this->_Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN17@Insert_at

; 1840 : 			{	// tree would get too big, fail
; 1841 : 			_Destroy_if_not_nil(_Node);

	movzx	edx, BYTE PTR __Node$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil

; 1842 : 			_Xlength_error("map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN17@Insert_at:

; 1843 : 			}
; 1844 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1845 : 			_STD forward<_Valty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode_if_nil@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Nil@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode_if_nil<Telegram const &>
	mov	DWORD PTR __Newnode$[ebp], eax

; 1846 : 
; 1847 : 		++this->_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1848 : 		_Newnode->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1849 : 
; 1850 : 		if (_Wherenode == this->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN16@Insert_at

; 1851 : 			{	// first node in tree, just set head values
; 1852 : 			_Root() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1853 : 			_Lmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx

; 1854 : 			_Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN15@Insert_at
$LN16@Insert_at:

; 1855 : 			}
; 1856 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN14@Insert_at

; 1857 : 			{	// add to left of _Wherenode
; 1858 : 			this->_Left(_Wherenode) = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1859 : 			if (_Wherenode == _Lmost())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN13@Insert_at

; 1860 : 				_Lmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN13@Insert_at:

; 1861 : 			}
; 1862 : 		else

	jmp	SHORT $LN15@Insert_at
$LN14@Insert_at:

; 1863 : 			{	// add to right of _Wherenode
; 1864 : 			this->_Right(_Wherenode) = _Newnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1865 : 			if (_Wherenode == _Rmost())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN15@Insert_at

; 1866 : 				_Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@Insert_at:

; 1867 : 			}
; 1868 : 
; 1869 : 		for (_Nodeptr _Pnode = _Newnode;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$2[ebp], edx
$LN10@Insert_at:

; 1870 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

	mov	eax, DWORD PTR __Pnode$2[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	$LN9@Insert_at

; 1871 : 			if (this->_Parent(_Pnode)
; 1872 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

	mov	eax, DWORD PTR __Pnode$2[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN8@Insert_at

; 1873 : 				{	// fixup red-red in left subtree
; 1874 : 				_Wherenode =
; 1875 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1876 : 				if (this->_Color(_Wherenode) == this->_Red)

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@Insert_at

; 1877 : 					{	// parent has two red children, blacken both
; 1878 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1879 : 					this->_Color(_Wherenode) = this->_Black;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1880 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1881 : 						= this->_Red;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1882 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$2[ebp], ecx

; 1883 : 					}
; 1884 : 				else

	jmp	$LN6@Insert_at
$LN7@Insert_at:

; 1885 : 					{	// parent has red and black children
; 1886 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Insert_at

; 1887 : 						{	// rotate right child to left
; 1888 : 						_Pnode = this->_Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$2[ebp], eax

; 1889 : 						_Lrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate
$LN5@Insert_at:

; 1890 : 						}
; 1891 : 					this->_Color(this->_Parent(_Pnode)) =
; 1892 : 						this->_Black;	// propagate red up

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1893 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1894 : 						this->_Red;

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1895 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate
$LN6@Insert_at:

; 1896 : 					}
; 1897 : 				}
; 1898 : 			else

	jmp	$LN4@Insert_at
$LN8@Insert_at:

; 1899 : 				{	// fixup red-red in right subtree
; 1900 : 				_Wherenode =
; 1901 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 1902 : 				if (this->_Color(_Wherenode) == this->_Red)

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN3@Insert_at

; 1903 : 					{	// parent has two red children, blacken both
; 1904 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1905 : 					this->_Color(_Wherenode) = this->_Black;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1906 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1907 : 						this->_Red;

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1908 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$2[ebp], eax

; 1909 : 					}
; 1910 : 				else

	jmp	$LN4@Insert_at
$LN3@Insert_at:

; 1911 : 					{	// parent has red and black children
; 1912 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@Insert_at

; 1913 : 						{	// rotate left child to right
; 1914 : 						_Pnode = this->_Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$2[ebp], eax

; 1915 : 						_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate
$LN1@Insert_at:

; 1916 : 						}
; 1917 : 					this->_Color(this->_Parent(_Pnode)) =
; 1918 : 						this->_Black;	// propagate red up

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1919 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1920 : 						this->_Red;

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1921 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate
$LN4@Insert_at:

; 1922 : 					}
; 1923 : 				}

	jmp	$LN10@Insert_at
$LN9@Insert_at:

; 1924 : 
; 1925 : 		this->_Color(_Root()) = this->_Black;	// root is always black

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1926 : 		return (iterator(_Newnode, this));

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert_at:

; 1927 : 		}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z PROC ; std::forward<Telegram const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ENDP ; std::forward<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>, COMDAT

; 558  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

	push	ebp
	mov	ebp, esp

; 559  : 	if (!_Pred(_Left, _Right))

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p

; 560  : 		return (false);

	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:

; 561  : 	else if (_Pred(_Right, _Left))

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p

; 562  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt_p:

; 563  : 	return (true);

	mov	al, 1
$LN4@Debug_lt_p:

; 564  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@UTelegram@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UTelegram@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UTelegram@@@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAUTelegram@@@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::destroy<Telegram>

; 758  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@UTelegram@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1798 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1800 : 	}

	pop	ebp
	ret	0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 666  : 	_System_error_category _Error_objects<_Cat>::_System_object;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 664  : 	_Iostream_error_category _Error_objects<_Cat>::_Iostream_object;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 662  : 	_Generic_error_category _Error_objects<_Cat>::_Generic_object;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_Tree_node<Telegram,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 89478485	; 05555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 48					; 00000030H
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 910  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<Telegram,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 910  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 574  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 575  : 		{	// construct from a related allocator (do nothing)
; 576  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > > >, COMDAT
; _this$ = ecx

; 846  : 		{	// construct from a related allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >

; 847  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 888  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate

; 877  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z PROC ; std::addressof<Telegram const >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ENDP ; std::addressof<Telegram const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z
_TEXT	SEGMENT
tv319 = -356						; size = 4
tv348 = -352						; size = 4
tv315 = -348						; size = 4
tv347 = -344						; size = 4
tv313 = -340						; size = 4
tv346 = -336						; size = 4
tv345 = -332						; size = 4
tv344 = -325						; size = 1
tv343 = -324						; size = 4
tv342 = -320						; size = 4
tv341 = -316						; size = 4
tv340 = -312						; size = 4
tv309 = -308						; size = 4
tv339 = -304						; size = 4
tv307 = -300						; size = 4
tv338 = -296						; size = 4
tv337 = -292						; size = 4
tv336 = -285						; size = 1
tv305 = -284						; size = 4
tv335 = -280						; size = 4
tv334 = -276						; size = 4
tv298 = -272						; size = 4
tv333 = -268						; size = 4
tv296 = -264						; size = 4
tv332 = -260						; size = 4
tv331 = -256						; size = 4
tv330 = -252						; size = 4
tv157 = -248						; size = 4
tv329 = -244						; size = 4
tv328 = -237						; size = 1
tv327 = -236						; size = 4
tv326 = -232						; size = 4
tv325 = -228						; size = 4
tv130 = -224						; size = 4
tv324 = -217						; size = 1
tv323 = -216						; size = 4
tv160 = -212						; size = 4
tv204 = -208						; size = 4
tv255 = -204						; size = 4
tv280 = -200						; size = 4
$T2 = -196						; size = 4
$T3 = -189						; size = 1
$T4 = -188						; size = 16
$T5 = -172						; size = 12
$T6 = -157						; size = 1
$T7 = -156						; size = 16
$T8 = -137						; size = 1
$T9 = -136						; size = 12
$T10 = -121						; size = 1
$T11 = -120						; size = 16
$T12 = -104						; size = 12
$T13 = -89						; size = 1
$T14 = -88						; size = 12
$T15 = -73						; size = 1
$T16 = -72						; size = 16
$T17 = -54						; size = 1
$T18 = -53						; size = 1
__Where$19 = -48					; size = 12
__Addleft$20 = -29					; size = 1
__Wherenode$21 = -28					; size = 4
__Trynode$22 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 1
??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Nil>, COMDAT
; _this$ = ecx

; 1780 : 		_Pairib _Insert_nohint(bool _Leftish,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 1781 : 			_Valty&& _Val, _Nodety _Newnode)
; 1782 : 		{	// try to insert node, on left if _Leftish
; 1783 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1784 : 		_Nodeptr _Trynode = _Root();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	DWORD PTR tv280[ebp], eax
	mov	eax, DWORD PTR tv280[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$22[ebp], ecx

; 1785 : 		_Nodeptr _Wherenode = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Wherenode$21[ebp], eax

; 1786 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$20[ebp], 1
$LN12@Insert_noh:

; 1787 : 
; 1788 : 		while (!this->_Isnil(_Trynode))

	mov	ecx, DWORD PTR __Trynode$22[ebp]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	mov	DWORD PTR tv255[ebp], eax
	mov	edx, DWORD PTR tv255[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	$LN11@Insert_noh

; 1789 : 			{	// look for leaf to insert before (_Addleft) or after
; 1790 : 			_Wherenode = _Trynode;

	mov	ecx, DWORD PTR __Trynode$22[ebp]
	mov	DWORD PTR __Wherenode$21[ebp], ecx

; 1791 : 			if (_Leftish)

	movzx	edx, BYTE PTR __Leftish$[ebp]
	test	edx, edx
	je	$LN10@Insert_noh

; 1792 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Trynode$22[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv160[ebp], eax
	lea	edx, DWORD PTR $T18[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	mov	DWORD PTR tv323[ebp], eax
	push	1794					; 00000702H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR tv204[ebp]
	push	eax
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	mov	edx, DWORD PTR tv323[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv324[ebp], al
	movzx	ecx, BYTE PTR tv324[ebp]
	test	ecx, ecx
	jne	SHORT $LN16@Insert_noh
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN17@Insert_noh
$LN16@Insert_noh:
	mov	DWORD PTR tv130[ebp], 0
$LN17@Insert_noh:
	mov	dl, BYTE PTR tv130[ebp]
	mov	BYTE PTR __Addleft$20[ebp], dl

; 1793 : 					this->_Key(_Trynode),
; 1794 : 					this->_Kfn(_Val));	// favor left end
; 1795 : 			else

	jmp	SHORT $LN9@Insert_noh
$LN10@Insert_noh:

; 1796 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

	mov	eax, DWORD PTR __Trynode$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv325[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv326[ebp], eax
	lea	edx, DWORD PTR $T17[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	mov	DWORD PTR tv327[ebp], eax
	push	1798					; 00000706H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR tv325[ebp]
	push	eax
	mov	ecx, DWORD PTR tv326[ebp]
	push	ecx
	mov	edx, DWORD PTR tv327[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv328[ebp], al
	mov	cl, BYTE PTR tv328[ebp]
	mov	BYTE PTR __Addleft$20[ebp], cl
$LN9@Insert_noh:

; 1797 : 					this->_Kfn(_Val),
; 1798 : 					this->_Key(_Trynode));	// favor right end
; 1799 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1800 : 				: this->_Right(_Trynode);

	movzx	edx, BYTE PTR __Addleft$20[ebp]
	test	edx, edx
	je	SHORT $LN18@Insert_noh
	mov	eax, DWORD PTR __Trynode$22[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	DWORD PTR tv329[ebp], eax
	mov	ecx, DWORD PTR tv329[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN19@Insert_noh
$LN18@Insert_noh:
	mov	eax, DWORD PTR __Trynode$22[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	DWORD PTR tv330[ebp], eax
	mov	ecx, DWORD PTR tv330[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv157[ebp], edx
$LN19@Insert_noh:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR __Trynode$22[ebp], eax

; 1801 : 			}

	jmp	$LN12@Insert_noh
$LN11@Insert_noh:

; 1802 : 
; 1803 : 		if (this->_Multi)

	xor	ecx, ecx
	je	$LN8@Insert_noh

; 1804 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	BYTE PTR $T15[ebp], 1
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	DWORD PTR tv331[ebp], eax
	movzx	eax, BYTE PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv331[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$21[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$20[ebp]
	push	eax
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>
	mov	DWORD PTR tv332[ebp], eax
	mov	edx, DWORD PTR tv332[ebp]
	mov	DWORD PTR tv296[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	push	0
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	mov	ecx, DWORD PTR tv296[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T16[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	DWORD PTR tv333[ebp], eax
	mov	edx, DWORD PTR tv333[ebp]
	mov	DWORD PTR tv298[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	push	0
	mov	eax, DWORD PTR tv298[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR $T16[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR $T14[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN15@Insert_noh

; 1805 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1806 : 		else

	jmp	$LN7@Insert_noh
$LN8@Insert_noh:

; 1807 : 			{	// insert only if unique
; 1808 : 			iterator _Where = iterator(_Wherenode, this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$21[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	DWORD PTR tv334[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1809 : 			if (!_Addleft)

	movzx	ecx, BYTE PTR __Addleft$20[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@Insert_noh
	jmp	$LN5@Insert_noh
$LN6@Insert_noh:

; 1810 : 				;	// need to test if insert after is okay
; 1811 : 			else if (_Where == begin())

	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv335[ebp], eax
	mov	eax, DWORD PTR tv335[ebp]
	mov	DWORD PTR tv305[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	ecx, DWORD PTR tv305[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	mov	BYTE PTR tv336[ebp], al
	mov	dl, BYTE PTR tv336[ebp]
	mov	BYTE PTR $T13[ebp], dl
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T12[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T13[ebp]
	test	eax, eax
	je	$LN4@Insert_noh

; 1812 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	mov	BYTE PTR $T10[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	DWORD PTR tv337[ebp], eax
	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	eax, DWORD PTR tv337[ebp]
	push	eax
	mov	ecx, DWORD PTR __Wherenode$21[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>
	mov	DWORD PTR tv338[ebp], eax
	mov	eax, DWORD PTR tv338[ebp]
	mov	DWORD PTR tv307[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	push	0
	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	edx, DWORD PTR tv307[ebp]
	push	edx
	lea	ecx, DWORD PTR $T11[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	DWORD PTR tv339[ebp], eax
	mov	eax, DWORD PTR tv339[ebp]
	mov	DWORD PTR tv309[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	push	0
	mov	ecx, DWORD PTR tv309[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR $T11[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN15@Insert_noh

; 1813 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1814 : 			else

	jmp	SHORT $LN5@Insert_noh
$LN4@Insert_noh:

; 1815 : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
$LN5@Insert_noh:

; 1816 : 
; 1817 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv340[ebp], eax
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
	mov	DWORD PTR tv341[ebp], eax
	mov	ecx, DWORD PTR tv341[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv342[ebp], eax
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	mov	DWORD PTR tv343[ebp], eax
	push	1819					; 0000071bH
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR tv340[ebp]
	push	eax
	mov	ecx, DWORD PTR tv342[ebp]
	push	ecx
	mov	edx, DWORD PTR tv343[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	??$_Debug_lt_pred@U?$less@UTelegram@@@std@@UTelegram@@U3@@std@@YA_NU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram>,Telegram,Telegram>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv344[ebp], al
	movzx	ecx, BYTE PTR tv344[ebp]
	test	ecx, ecx
	je	$LN2@Insert_noh

; 1818 : 				this->_Key(_Where._Mynode()),
; 1819 : 				this->_Kfn(_Val)))
; 1820 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	BYTE PTR $T6[ebp], 1
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	DWORD PTR tv345[ebp], eax
	movzx	eax, BYTE PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv345[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$21[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$20[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Nil>
	mov	DWORD PTR tv346[ebp], eax
	mov	edx, DWORD PTR tv346[ebp]
	mov	DWORD PTR tv313[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	push	0
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR tv313[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T7[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	DWORD PTR tv347[ebp], eax
	mov	edx, DWORD PTR tv347[ebp]
	mov	DWORD PTR tv315[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	push	0
	mov	eax, DWORD PTR tv315[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN15@Insert_noh

; 1821 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1822 : 			else

	jmp	$LN1@Insert_noh
$LN2@Insert_noh:

; 1823 : 				{	// duplicate, don't insert
; 1824 : 				_Destroy_if_not_nil(_Newnode);

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil

; 1825 : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T3[ebp], 0
	push	0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$19[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_NPAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool>
	mov	DWORD PTR tv348[ebp], eax
	mov	edx, DWORD PTR tv348[ebp]
	mov	DWORD PTR tv319[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	push	0
	mov	eax, DWORD PTR tv319[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN15@Insert_noh
$LN1@Insert_noh:

; 1826 : 				}
; 1827 : 			}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$19[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN7@Insert_noh:
	jmp	SHORT $LN20@Insert_noh
__catch$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$0:

; 1828 : 		_CATCH_ALL
; 1829 : 		_Destroy_if_not_nil(_Newnode);

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil

; 1830 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1831 : 		_CATCH_END

	mov	eax, $LN34@Insert_noh
	ret	0
$LN20@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN15@Insert_noh
$LN34@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN15@Insert_noh:

; 1832 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@Insert_noh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN38@Insert_noh:
	DD	1
	DD	$LN37@Insert_noh
$LN37@Insert_noh:
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN35@Insert_noh
$LN35@Insert_noh:
	DB	95					; 0000005fH
	DB	87					; 00000057H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$2:
	lea	ecx, DWORD PTR $T14[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$3:
	lea	ecx, DWORD PTR $T16[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$5:
	lea	ecx, DWORD PTR __Where$19[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$6:
	lea	ecx, DWORD PTR $T12[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$7:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$8:
	lea	ecx, DWORD PTR $T11[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$9:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$10:
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z$11:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Nil>
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z PROC ; std::pointer_traits<Telegram const *>::pointer_to, COMDAT

; 232  : 		{	// convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 233  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
	add	esp, 4

; 234  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ENDP ; std::pointer_traits<Telegram const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@UTelegram@@@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAUTelegram@@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
	add	esp, 8

; 910  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z PROC ; std::addressof<Telegram>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ENDP ; std::addressof<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 46   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 47   : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR __Tmp$[ebp], cl

; 48   : 	_Left = _Move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 49   : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 50   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>, COMDAT
; _this$ = ecx

; 182  : 		{	// construct from moved compatible pair

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 183  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 342  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv146 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN2@operator
$LN1@operator:

; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");

	push	327					; 00000147H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;

	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	328					; 00000148H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	328					; 00000148H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN7@operator
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	DWORD PTR tv146[ebp], 0
$LN8@operator:
	mov	al, BYTE PTR tv146[ebp]

; 337  : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Ptrsav$ = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@operator
$LN2@operator:

; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");

	push	288					; 00000120H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 289  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	ecx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	ecx, ecx
	je	SHORT $LN6@operator
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN6@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	289					; 00000121H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN7@operator
	int	3
$LN7@operator:
	push	0
	push	289					; 00000121H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@operator:

; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Ptrsav$[ebp], edx

; 293  : 		--(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--

; 294  : 		if (_Ptrsav == this->_Ptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptrsav$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@operator

; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");

	push	296					; 00000128H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 297  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	edx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	edx, edx
	je	SHORT $LN8@operator
	xor	eax, eax
	jne	SHORT $LN9@operator
$LN8@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	297					; 00000129H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN9@operator
	int	3
$LN9@operator:
	push	0
	push	297					; 00000129H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:

; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 312  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 277  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 278  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++

; 279  : 		return (_Tmp);

	lea	ecx, DWORD PTR __Tmp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 280  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN2@operator
$LN1@operator:

; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");

	push	262					; 00000106H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 263  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	ecx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	ecx, ecx
	je	SHORT $LN5@operator
	xor	edx, edx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	263					; 00000107H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	263					; 00000107H
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++

; 272  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 273  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->, COMDAT
; _this$ = ecx

; 251  : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
	add	esp, 4

; 253  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*, COMDAT
; _this$ = ecx

; 231  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN2@operator
$LN1@operator:

; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");

	push	237					; 000000edH
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 238  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	238					; 000000eeH
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	238					; 000000eeH
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
	add	esp, 4

; 248  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>

; 215  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 124  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN8@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], eax
	jmp	$LN7@operator
$LN8@operator:

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@operator

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 90   : 		else

	jmp	SHORT $LN7@operator
$LN4@operator:

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$1[ebp], edx
	mov	eax, DWORD PTR __Pnode$1[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR __Pnode$1[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN4@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else

	jmp	SHORT $LN7@operator
$LN2@operator:

; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx+8], eax
$LN7@operator:

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 102  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN6@operator
	jmp	$LN5@operator
$LN6@operator:

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@operator

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 65   : 		else

	jmp	SHORT $LN5@operator
$LN2@operator:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$1[ebp], ecx
	mov	edx, DWORD PTR __Pnode$1[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN1@operator
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN2@operator
$LN1@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN5@operator:

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 74   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 46   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::~_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::~_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@UTelegram@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>::_Iterator012<std::bidirectional_iterator_tag,Telegram,int,Telegram const *,Telegram const &,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ
text$yd	SEGMENT
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ PROC ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??1MessageDispatcher@@QAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ENDP ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\framecounter.h
;	COMDAT ?GetCurrentFrame@FrameCounter@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentFrame@FrameCounter@@QAEJXZ PROC		; FrameCounter::GetCurrentFrame, COMDAT
; _this$ = ecx

; 27   :   long GetCurrentFrame(){return m_lCount;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentFrame@FrameCounter@@QAEJXZ ENDP		; FrameCounter::GetCurrentFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EQuarterPi@@YAXXZ
text$yc	SEGMENT
??__EQuarterPi@@YAXXZ PROC				; `dynamic initializer for 'QuarterPi'', COMDAT

; 32   : const double   QuarterPi = Pi / 4;

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _Pi
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR _QuarterPi, xmm0
	pop	ebp
	ret	0
??__EQuarterPi@@YAXXZ ENDP				; `dynamic initializer for 'QuarterPi''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EHalfPi@@YAXXZ
text$yc	SEGMENT
??__EHalfPi@@YAXXZ PROC					; `dynamic initializer for 'HalfPi'', COMDAT

; 31   : const double   HalfPi    = Pi / 2;

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _Pi
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _HalfPi, xmm0
	pop	ebp
	ret	0
??__EHalfPi@@YAXXZ ENDP					; `dynamic initializer for 'HalfPi''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__ETwoPi@@YAXXZ
text$yc	SEGMENT
??__ETwoPi@@YAXXZ PROC					; `dynamic initializer for 'TwoPi'', COMDAT

; 30   : const double   TwoPi     = Pi * 2;

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _Pi
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _TwoPi, xmm0
	pop	ebp
	ret	0
??__ETwoPi@@YAXXZ ENDP					; `dynamic initializer for 'TwoPi''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$yc	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR _MinFloat
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$yc	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR _MaxFloat
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$yc	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR _MinDouble
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$yc	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR _MaxDouble
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$yc	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR _MaxInt, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1MessageDispatcher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MessageDispatcher@@QAE@XZ PROC			; MessageDispatcher::~MessageDispatcher, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1MessageDispatcher@@QAE@XZ ENDP			; MessageDispatcher::~MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\messagedispatcher.cpp
_TEXT	SEGMENT
tv207 = -128						; size = 4
tv206 = -124						; size = 4
tv204 = -120						; size = 4
tv217 = -116						; size = 4
tv137 = -112						; size = 4
tv198 = -108						; size = 4
tv213 = -104						; size = 4
tv193 = -100						; size = 4
tv209 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 12
$T4 = -76						; size = 4
$T5 = -72						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 12
$T8 = -33						; size = 1
_pReceiver$9 = -32					; size = 4
_telegram$10 = -28					; size = 4
_CurrentTime$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ PROC	; MessageDispatcher::DispatchDelayedMessages
; _this$ = ecx

; 104  : { 

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 105  :   //first get current time
; 106  :   double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$[ebp], xmm0
$LN2@DispatchDe:

; 107  : 
; 108  :   //now peek at the queue to see if any telegrams need dispatching.
; 109  :   //remove all telegrams from the front of the queue that have gone
; 110  :   //past their sell by date
; 111  :   while( !PriorityQ.empty() &&
; 112  : 	     (PriorityQ.begin()->DispatchTime < CurrentTime) && 
; 113  :          (PriorityQ.begin()->DispatchTime > 0) )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv209[ebp], eax
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv193[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv193[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR _CurrentTime$[ebp]
	comisd	xmm0, QWORD PTR [eax+16]
	jbe	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv213[ebp], eax
	mov	edx, DWORD PTR tv213[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 2
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv198[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@DispatchDe
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN6@DispatchDe
$LN5@DispatchDe:
	mov	DWORD PTR tv137[ebp], 0
$LN6@DispatchDe:
	mov	cl, BYTE PTR tv137[ebp]
	mov	BYTE PTR $T8[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 2
	je	SHORT $LN11@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN11@DispatchDe:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN12@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN12@DispatchDe:
	movzx	ecx, BYTE PTR $T8[ebp]
	test	ecx, ecx
	je	$LN1@DispatchDe

; 114  :   {
; 115  :     //read the telegram from the front of the queue
; 116  :     const Telegram& telegram = *PriorityQ.begin();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv217[ebp], eax
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv204[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv204[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	mov	DWORD PTR _telegram$10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 117  : 
; 118  :     //find the recipient
; 119  :     BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(telegram.Receiver);

	mov	ecx, DWORD PTR _telegram$10[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$9[ebp], eax

; 120  : 
; 121  :     #ifdef SHOW_MESSAGING_INFO
; 122  :     debug_con << "\nQueued telegram ready for dispatch: Sent to " 
; 123  :          << pReceiver->ID() << ". Msg is "<< telegram.Msg << "";
; 124  :     #endif
; 125  : 
; 126  :     //send the telegram to the recipient
; 127  :     Discharge(pReceiver, telegram);

	mov	eax, DWORD PTR _telegram$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 128  : 
; 129  : 	//remove it from the queue
; 130  :     PriorityQ.erase(PriorityQ.begin());

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv206[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv207[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 131  :   }

	jmp	$LN2@DispatchDe
$LN1@DispatchDe:

; 132  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN8@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN8@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 2
	je	$LN10@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN10@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ENDP	; MessageDispatcher::DispatchDelayedMessages
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\messagedispatcher.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 16
_CurrentTime$2 = -56					; size = 8
_telegram$ = -44					; size = 32
_pReceiver$ = -8					; size = 4
_this$ = -4						; size = 4
_delay$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_AdditionalInfo$ = 28					; size = 4
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z PROC	; MessageDispatcher::DispatchMsg
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 
; 51   :   //get a pointer to the receiver
; 52   :   BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(receiver);

	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$[ebp], eax

; 53   : 
; 54   :   //make sure the receiver is valid
; 55   :   if (pReceiver == NULL)

	cmp	DWORD PTR _pReceiver$[ebp], 0
	jne	SHORT $LN3@DispatchMs

; 56   :   {
; 57   :     #ifdef SHOW_MESSAGING_INFO
; 58   :     debug_con << "\nWarning! No Receiver with ID of " << receiver << " found" << "";
; 59   :     #endif
; 60   : 
; 61   :     return;

	jmp	$LN4@DispatchMs
$LN3@DispatchMs:

; 62   :   }
; 63   :   
; 64   :   //create the telegram
; 65   :   Telegram telegram(0, sender, receiver, msg, AdditionalInfo);

	mov	ecx, DWORD PTR _AdditionalInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sender$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _telegram$[ebp]
	call	??0Telegram@@QAE@NHHHPAX@Z		; Telegram::Telegram

; 66   :   
; 67   :   //if there is no delay, route telegram immediately                       
; 68   :   if (delay <= 0.0)                                                        

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _delay$[ebp]
	jb	SHORT $LN2@DispatchMs

; 69   :   {
; 70   :     #ifdef SHOW_MESSAGING_INFO
; 71   :     debug_con << "\nTelegram dispatched at time: " << TickCounter->GetCurrentFrame()
; 72   :          << " by " << sender << " for " << receiver 
; 73   :          << ". Msg is " << msg << "";
; 74   :     #endif
; 75   : 
; 76   :     //send the telegram to the recipient
; 77   :     Discharge(pReceiver, telegram);

	lea	edx, DWORD PTR _telegram$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 78   :   }
; 79   : 
; 80   :   //else calculate the time when the telegram should be dispatched
; 81   :   else

	jmp	SHORT $LN1@DispatchMs
$LN2@DispatchMs:

; 82   :   {
; 83   :     double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$2[ebp], xmm0

; 84   : 
; 85   :     telegram.DispatchTime = CurrentTime + delay;

	movsd	xmm0, QWORD PTR _CurrentTime$2[ebp]
	addsd	xmm0, QWORD PTR _delay$[ebp]
	movsd	QWORD PTR _telegram$[ebp+16], xmm0

; 86   : 
; 87   :     //and put it in the queue
; 88   :     PriorityQ.insert(telegram);   

	lea	ecx, DWORD PTR _telegram$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::insert
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
$LN1@DispatchMs:
$LN4@DispatchMs:

; 89   : 
; 90   :     #ifdef SHOW_MESSAGING_INFO
; 91   :     debug_con << "\nDelayed telegram from " << sender << " recorded at time " 
; 92   :             << TickCounter->GetCurrentFrame() << " for " << receiver
; 93   :             << ". Msg is " << msg << "";
; 94   :     #endif
; 95   :   }
; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DispatchMs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN9@DispatchMs:
	DD	1
	DD	$LN8@DispatchMs
$LN8@DispatchMs:
	DD	-44					; ffffffd4H
	DD	32					; 00000020H
	DD	$LN7@DispatchMs
$LN7@DispatchMs:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z ENDP	; MessageDispatcher::DispatchMsg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\messagedispatcher.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Instance@MessageDispatcher@@SAPAV1@XZ PROC		; MessageDispatcher::Instance

; 17   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 18   :   static MessageDispatcher instance; 

	mov	eax, DWORD PTR ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA
	and	eax, 1
	jne	SHORT $LN1@Instance
	mov	ecx, DWORD PTR ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??0MessageDispatcher@@AAE@XZ		; MessageDispatcher::MessageDispatcher
	push	OFFSET ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@Instance:

; 19   :   
; 20   :   return &instance;

	mov	eax, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A

; 21   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0:
	mov	eax, DWORD PTR ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4IA, eax
	ret	0
__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Instance@MessageDispatcher@@SAPAV1@XZ ENDP		; MessageDispatcher::Instance
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\messagedispatcher.h
;	COMDAT ??0MessageDispatcher@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MessageDispatcher@@AAE@XZ PROC			; MessageDispatcher::MessageDispatcher, COMDAT
; _this$ = ecx

; 47   :   MessageDispatcher(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0MessageDispatcher@@AAE@XZ ENDP			; MessageDispatcher::MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\messagedispatcher.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pReceiver$ = 8						; size = 4
_telegram$ = 12						; size = 4
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z PROC ; MessageDispatcher::Discharge
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 29   :   if (!pReceiver->HandleMessage(telegram))

	mov	esi, esp
	mov	eax, DWORD PTR _telegram$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   :   {
; 31   :     //telegram could not be handled
; 32   :     #ifdef SHOW_MESSAGING_INFO
; 33   :     debug_con << "Message not handled" << "";
; 34   :     #endif
; 35   :   }
; 36   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ENDP ; MessageDispatcher::Discharge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\set
;	COMDAT ?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
_TEXT	SEGMENT
tv80 = -44						; size = 4
tv65 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::insert, COMDAT
; _this$ = ecx

; 165  : 		{	// insert a key value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 166  : 		return (_Mybase::insert(_Val));

	push	0
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv80[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 167  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::insert
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\set
;	COMDAT ??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx

; 68   : 		{	// construct empty set from defaults

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@UTelegram@@@std@@QAE@XZ	; std::allocator<Telegram>::allocator<Telegram>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >

; 69   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key, COMDAT
; _this$ = ecx

; 2225 : 		{	// return reference to key in node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2226 : 		return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn

; 2227 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2220 : 		{	// get key from value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2221 : 		return (_Traits::_Kfn(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
	add	esp, 4

; 2222 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
tv129 = -36						; size = 4
tv132 = -32						; size = 4
tv128 = -28						; size = 4
$T1 = -24						; size = 12
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2215 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2216 : 		erase(begin(), end());

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T3[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
	mov	DWORD PTR tv128[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv132[ebp], eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv129[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 2217 : 		}

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Cont$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 2198 : 		{	// orphan iterators with specified node pointers

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2199 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2200 : 		const_iterator **_Pnext = (const_iterator **)_Cont._Getpfirst();

	mov	ecx, DWORD PTR __Cont$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 2201 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ptr
$LN5@Orphan_ptr:

; 2202 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ptr

; 2203 : 				if ((*_Pnext)->_Ptr == this->_Myhead
; 2204 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN2@Orphan_ptr
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN3@Orphan_ptr
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	je	SHORT $LN3@Orphan_ptr
$LN2@Orphan_ptr:

; 2205 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 2206 : 				else

	jmp	SHORT $LN1@Orphan_ptr
$LN3@Orphan_ptr:

; 2207 : 					{	// orphan the iterator
; 2208 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 2209 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ptr:

; 2210 : 					}

	jmp	SHORT $LN5@Orphan_ptr
$LN6@Orphan_ptr:

; 2211 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ptr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@Orphan_ptr:
	DD	1
	DD	$LN12@Orphan_ptr
$LN12@Orphan_ptr:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ptr
$LN10@Orphan_ptr:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2143 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2144 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 2145 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2146 : 
; 2147 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Rrotate

; 2148 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Rrotate:

; 2149 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2150 : 
; 2151 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Rrotate

; 2152 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Rrotate
$LN4@Rrotate:

; 2153 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Rrotate

; 2154 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2155 : 		else

	jmp	SHORT $LN3@Rrotate
$LN2@Rrotate:

; 2156 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Rrotate:

; 2157 : 
; 2158 : 		this->_Right(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2159 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2160 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root, COMDAT
; _this$ = ecx

; 2138 : 		{	// return root of nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2139 : 		return (this->_Parent(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4

; 2140 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost, COMDAT
; _this$ = ecx

; 2133 : 		{	// return rightmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2134 : 		return (this->_Right(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4

; 2135 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2113 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2114 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 2115 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2116 : 
; 2117 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Lrotate

; 2118 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Lrotate:

; 2119 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2120 : 
; 2121 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Lrotate

; 2122 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Lrotate
$LN4@Lrotate:

; 2123 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Lrotate

; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2125 : 		else

	jmp	SHORT $LN3@Lrotate
$LN2@Lrotate:

; 2126 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Lrotate:

; 2127 : 
; 2128 : 		this->_Left(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2129 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2130 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2108 : 		{	// return leftmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2109 : 		return (this->_Left(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4

; 2110 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Pnode$3 = -8						; size = 4
_this$ = -4						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	jmp	SHORT $LN3@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN3@Erase:
	mov	edx, DWORD PTR __Pnode$3[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN4@Erase

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$3[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>

; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);

	push	1
	mov	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 2070 : 			}

	jmp	$LN2@Erase
$LN4@Erase:

; 2071 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1659 : 		{	// node doesn't exist, do nothing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1660 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Nil@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear, COMDAT
; _this$ = ecx

; 1532 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1533 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1534 : 		this->_Orphan_ptr(*this, 0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr

; 1535 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1536 : 
; 1537 : 		_Erase(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase

; 1538 : 		_Root() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx

; 1539 : 		_Lmost() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx

; 1540 : 		_Rmost() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx

; 1541 : 		this->_Mysize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1542 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
tv189 = -92						; size = 4
tv188 = -88						; size = 4
tv86 = -84						; size = 4
tv176 = -80						; size = 4
tv196 = -76						; size = 4
tv171 = -72						; size = 4
tv152 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 12
$T4 = -48						; size = 4
$T5 = -44						; size = 12
$T6 = -32						; size = 12
$T7 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase, COMDAT
; _this$ = ecx

; 1508 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1509 : 		if (_First == begin() && _Last == end())

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv171[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR tv171[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@erase
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
	mov	DWORD PTR tv196[ebp], eax
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR tv176[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 2
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR tv176[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@erase
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN8@erase
$LN7@erase:
	mov	DWORD PTR tv86[ebp], 0
$LN8@erase:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR $T7[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 2
	je	SHORT $LN15@erase
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN15@erase:
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN16@erase
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN16@erase:
	movzx	ecx, BYTE PTR $T7[ebp]
	test	ecx, ecx
	je	SHORT $LN2@erase

; 1510 : 			{	// erase all
; 1511 : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear

; 1512 : 			return (begin());

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@erase

; 1513 : 			}
; 1514 : 		else

	jmp	SHORT $LN3@erase
$LN2@erase:

; 1515 : 			{	// partial erase, one at a time
; 1516 : 			while (_First != _Last)

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@erase

; 1517 : 				erase(_First++);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T4[ebp], esp
	push	0
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
	mov	DWORD PTR tv188[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv189[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN2@erase
$LN1@erase:

; 1518 : 			return (iterator(_First._Ptr, this));

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 4
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase
$LN3@erase:

; 1519 : 			}
; 1520 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN5@erase:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$2:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN12@erase
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN12@erase:
	ret	0
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$3:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 2
	je	$LN14@erase
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN14@erase:
	ret	0
__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
tv199 = -48						; size = 4
tv187 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -34						; size = 1
$T4 = -33						; size = 1
__Pnode$ = -32						; size = 4
__Fixnodeparent$ = -28					; size = 4
__Fixnode$ = -24					; size = 4
__Erasednode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase, COMDAT
; _this$ = ecx

; 1323 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1324 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1325 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN40@erase
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN41@erase
$LN40@erase:

; 1326 : 			_DEBUG_ERROR("map/set erase iterator outside range");

	push	1326					; 0000052eH
	push	OFFSET ??_C@_1HO@LPDNMHCN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN41@erase:

; 1327 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
	mov	DWORD PTR __Erasednode$[ebp], eax

; 1328 : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++

; 1329 : 		_Orphan_ptr(*this, _Erasednode);

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEXAAV12@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr

; 1330 : 
; 1331 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1332 : 		if (this->_Isnil(_Where._Mynode()))
; 1333 : 			_Xout_of_range("invalid map/set<T> iterator");
; 1334 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1335 : 		++_Where;	// save successor iterator for return
; 1336 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 
; 1338 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1339 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1340 : 		_Nodeptr _Pnode = _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1341 : 
; 1342 : 		if (this->_Isnil(this->_Left(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN39@erase

; 1343 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], edx
	jmp	SHORT $LN38@erase
$LN39@erase:

; 1344 : 		else if (this->_Isnil(this->_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN37@erase

; 1345 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 1346 : 		else

	jmp	SHORT $LN38@erase
$LN37@erase:

; 1347 : 			{	// two subtrees, must lift successor node to replace erased
; 1348 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1349 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], eax
$LN38@erase:

; 1350 : 			}
; 1351 : 
; 1352 : 		if (_Pnode == _Erasednode)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	$LN35@erase

; 1353 : 			{	// at most one subtree, relink it
; 1354 : 			_Fixnodeparent = this->_Parent(_Erasednode);

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax

; 1355 : 			if (!this->_Isnil(_Fixnode))

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN34@erase

; 1356 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], ecx
$LN34@erase:

; 1357 : 
; 1358 : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN33@erase

; 1359 : 				_Root() = _Fixnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN32@erase
$LN33@erase:

; 1360 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN31@erase

; 1361 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], edx

; 1362 : 			else

	jmp	SHORT $LN32@erase
$LN31@erase:

; 1363 : 				this->_Right(_Fixnodeparent) =
; 1364 : 					_Fixnode;	// link down to right

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN32@erase:

; 1365 : 
; 1366 : 			if (_Lmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN29@erase

; 1367 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1368 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1369 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN44@erase
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv187[ebp], edx
	jmp	SHORT $LN45@erase
$LN44@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	DWORD PTR tv187[ebp], eax
$LN45@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	ecx, DWORD PTR tv187[ebp]
	mov	DWORD PTR [eax], ecx
$LN29@erase:

; 1370 : 
; 1371 : 			if (_Rmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN28@erase

; 1372 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1373 : 					? _Fixnodeparent	// largest is parent of erased node
; 1374 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN46@erase
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv199[ebp], edx
	jmp	SHORT $LN47@erase
$LN46@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	DWORD PTR tv199[ebp], eax
$LN47@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rmost
	mov	ecx, DWORD PTR tv199[ebp]
	mov	DWORD PTR [eax], ecx
$LN28@erase:

; 1375 : 			}
; 1376 : 		else

	jmp	$LN27@erase
$LN35@erase:

; 1377 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1378 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1379 : 				_Pnode;	// link left up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1380 : 			this->_Left(_Pnode) =
; 1381 : 				this->_Left(_Erasednode);	// link successor down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1382 : 
; 1383 : 			if (_Pnode == this->_Right(_Erasednode))

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN26@erase

; 1384 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 1385 : 			else

	jmp	$LN25@erase
$LN26@erase:

; 1386 : 				{	// successor further down, link in place of erased
; 1387 : 				_Fixnodeparent =
; 1388 : 					this->_Parent(_Pnode);	// parent is successor's

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 1389 : 				if (!this->_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN24@erase

; 1390 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], edx
$LN24@erase:

; 1391 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1392 : 				this->_Right(_Pnode) =
; 1393 : 					this->_Right(_Erasednode);	// link next down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1394 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1395 : 					_Pnode;	// right up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN25@erase:

; 1396 : 				}
; 1397 : 
; 1398 : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN23@erase

; 1399 : 				_Root() = _Pnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN22@erase
$LN23@erase:

; 1400 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN21@erase

; 1401 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1402 : 					_Pnode;	// link down to left

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1403 : 			else

	jmp	SHORT $LN22@erase
$LN21@erase:

; 1404 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1405 : 					_Pnode;	// link down to right

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN22@erase:

; 1406 : 
; 1407 : 			this->_Parent(_Pnode) =
; 1408 : 				this->_Parent(_Erasednode);	// link successor up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1409 : 			_STD swap(this->_Color(_Pnode),
; 1410 : 				this->_Color(_Erasednode));	// recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	push	eax
	call	??$swap@D@std@@YAXAAD0@Z		; std::swap<char>
	add	esp, 8
$LN27@erase:

; 1411 : 			}
; 1412 : 
; 1413 : 		if (this->_Color(_Erasednode) == this->_Black)

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	$LN19@erase

; 1414 : 			{	// erasing black link, must recolor/rebalance tree
; 1415 : 			for (; _Fixnode != _Root()
; 1416 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1417 : 				_Fixnodeparent = this->_Parent(_Fixnode))

	jmp	SHORT $LN18@erase
$LN17@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx
$LN18@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Root
	mov	edx, DWORD PTR __Fixnode$[ebp]
	cmp	edx, DWORD PTR [eax]
	je	$LN16@erase
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	$LN16@erase

; 1418 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN15@erase

; 1419 : 					{	// fixup left subtree
; 1420 : 					_Pnode = this->_Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1421 : 					if (this->_Color(_Pnode) == this->_Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN14@erase

; 1422 : 						{	// rotate red up from right subtree
; 1423 : 						this->_Color(_Pnode) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1424 : 						this->_Color(_Fixnodeparent) = this->_Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1425 : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate

; 1426 : 						_Pnode = this->_Right(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN14@erase:

; 1427 : 						}
; 1428 : 
; 1429 : 					if (this->_Isnil(_Pnode))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN13@erase

; 1430 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 1431 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

	jmp	$LN12@erase
$LN13@erase:

; 1432 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase

; 1433 : 						{	// redden right subtree with black children
; 1434 : 						this->_Color(_Pnode) = this->_Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1435 : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 1436 : 						}
; 1437 : 					else

	jmp	$LN12@erase
$LN11@erase:

; 1438 : 						{	// must rearrange right subtree
; 1439 : 						if (this->_Color(this->_Right(_Pnode))
; 1440 : 							== this->_Black)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 1
	jne	SHORT $LN9@erase

; 1441 : 							{	// rotate red up from left sub-subtree
; 1442 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1443 : 							this->_Color(_Pnode) = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1444 : 							_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate

; 1445 : 							_Pnode = this->_Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN9@erase:

; 1446 : 							}
; 1447 : 
; 1448 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 1449 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1450 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1451 : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate

; 1452 : 						break;	// tree now recolored/rebalanced

	jmp	$LN16@erase
$LN12@erase:

; 1453 : 						}
; 1454 : 					}
; 1455 : 				else

	jmp	$LN8@erase
$LN15@erase:

; 1456 : 					{	// fixup right subtree
; 1457 : 					_Pnode = this->_Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1458 : 					if (this->_Color(_Pnode) == this->_Red)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN7@erase

; 1459 : 						{	// rotate red up from left subtree
; 1460 : 						this->_Color(_Pnode) = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1461 : 						this->_Color(_Fixnodeparent) = this->_Red;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1462 : 						_Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate

; 1463 : 						_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN7@erase:

; 1464 : 						}
; 1465 : 
; 1466 : 					if (this->_Isnil(_Pnode))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@erase

; 1467 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 1468 : 					else if (this->_Color(this->_Right(_Pnode)) ==

	jmp	$LN8@erase
$LN6@erase:

; 1469 : 						this->_Black
; 1470 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase

; 1471 : 						{	// redden left subtree with black children
; 1472 : 						this->_Color(_Pnode) = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1473 : 						_Fixnode = _Fixnodeparent;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 1474 : 						}
; 1475 : 					else

	jmp	$LN8@erase
$LN4@erase:

; 1476 : 						{	// must rearrange left subtree
; 1477 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN2@erase

; 1478 : 							{	// rotate red up from right sub-subtree
; 1479 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1480 : 							this->_Color(_Pnode) = this->_Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1481 : 							_Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lrotate

; 1482 : 							_Pnode = this->_Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN2@erase:

; 1483 : 							}
; 1484 : 
; 1485 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 1486 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1487 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1488 : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Rrotate

; 1489 : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN16@erase
$LN8@erase:

; 1490 : 						}
; 1491 : 					}

	jmp	$LN17@erase
$LN16@erase:

; 1492 : 
; 1493 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1
$LN19@erase:

; 1494 : 			}
; 1495 : 
; 1496 : 		this->_Getal().destroy(
; 1497 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@UTelegram@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAUTelegram@@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>

; 1498 : 
; 1499 : 		this->_Getal().deallocate(_Erasednode, 1);

	push	1
	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 1500 : 
; 1501 : 		if (0 < this->_Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jbe	SHORT $LN1@erase

; 1502 : 			--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@erase:

; 1503 : 
; 1504 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1505 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
_TEXT	SEGMENT
tv78 = -44						; size = 4
tv65 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert, COMDAT
; _this$ = ecx

; 1302 : 		{	// try to insert node with value _Val, favoring right side

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 1303 : 		return (_Insert_nohint(false,
; 1304 : 			_Val, _Nil_obj));

	push	0
	movzx	eax, BYTE PTR __Nil_obj
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_nohint@ABUTelegram@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Nil>
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAU01@PAPAX@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1305 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@2@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty, COMDAT
; _this$ = ecx

; 1282 : 		{	// return true only if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1283 : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
	test	eax, eax
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv67[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv67[ebp]

; 1284 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size, COMDAT
; _this$ = ecx

; 1277 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1278 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size

; 1279 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size, COMDAT
; _this$ = ecx

; 1272 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1273 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 1274 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end, COMDAT
; _this$ = ecx

; 1220 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1221 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1222 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin, COMDAT
; _this$ = ecx

; 1210 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1211 : 		return (iterator(_Lmost(), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Lmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1212 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 1188 : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1189 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy

; 1190 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 1071 : 		{	// construct empty tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >

; 1072 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ PROC ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1011 : 		{	// get ordering predicate

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1012 : 		return (key_compare());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1013 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getcomp@?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE?AU?$less@UTelegram@@@2@XZ ENDP ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z PROC ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 1007 : 		{	// construct ordering predicate

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Tree_buy<Telegram,std::allocator<Telegram> >

; 1008 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_comp@$0A@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@ABV?$allocator@UTelegram@@@1@@Z ENDP ; std::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp<0,std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@XZ PROC ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::~_Tree_buy<Telegram,std::allocator<Telegram> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::~_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::~_Tree_buy<Telegram,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Freenode0, COMDAT
; _this$ = ecx

; 916  : 		{	// free non-value node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		this->_Getal().destroy(
; 918  : 			_STD addressof(this->_Left(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 919  : 		this->_Getal().destroy(
; 920  : 			_STD addressof(this->_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 921  : 		this->_Getal().destroy(
; 922  : 			_STD addressof(this->_Right(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 923  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 924  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
tv181 = -56						; size = 4
tv180 = -52						; size = 4
tv179 = -48						; size = 4
tv178 = -44						; size = 4
tv177 = -40						; size = 4
tv176 = -36						; size = 4
$T2 = -29						; size = 1
$T3 = -28						; size = 1
$T4 = -27						; size = 1
$T5 = -26						; size = 1
$T6 = -25						; size = 1
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode0, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate a non-value node

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 898  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 899  : 
; 900  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 901  : 		this->_Getal().construct(
; 902  : 			_STD addressof(this->_Left(_Pnode)), this->_Myhead);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	DWORD PTR tv176[ebp], eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv177[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv177[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>

; 903  : 		this->_Getal().construct(
; 904  : 			_STD addressof(this->_Parent(_Pnode)), this->_Myhead);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	DWORD PTR tv178[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv179[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv179[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>

; 905  : 		this->_Getal().construct(
; 906  : 			_STD addressof(this->_Right(_Pnode)), this->_Myhead);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	DWORD PTR tv180[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv181[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR tv180[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv181[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	jmp	SHORT $LN4@Buynode0
__catch$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0:

; 907  : 		_CATCH_ALL
; 908  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 909  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 910  : 		_CATCH_END

	mov	eax, $LN7@Buynode0
	ret	0
$LN4@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1
$LN7@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1:

; 911  : 
; 912  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode0:

; 913  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Buynode0
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z PROC ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Tree_buy<Telegram,std::allocator<Telegram> >, COMDAT
; _this$ = ecx

; 893  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >

; 894  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_buy@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ENDP ; std::_Tree_buy<Telegram,std::allocator<Telegram> >::_Tree_buy<Telegram,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal, COMDAT
; _this$ = ecx

; 873  : 		{	// get allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 874  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 875  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 862  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 863  : 		this->_Getal().destroy(
; 864  : 			_STD addressof(this->_Left(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 865  : 		this->_Getal().destroy(
; 866  : 			_STD addressof(this->_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 867  : 		this->_Getal().destroy(
; 868  : 			_STD addressof(this->_Right(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>

; 869  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 870  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
tv150 = -64						; size = 4
tv149 = -60						; size = 4
tv148 = -56						; size = 4
tv147 = -52						; size = 4
tv146 = -48						; size = 4
tv145 = -44						; size = 4
$T2 = -37						; size = 1
$T3 = -36						; size = 1
$T4 = -35						; size = 1
$T5 = -34						; size = 1
$T6 = -33						; size = 1
__Pnode$ = -28						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 841  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 842  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 843  : 
; 844  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 845  : 		this->_Getal().construct(
; 846  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	DWORD PTR tv145[ebp], eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv146[ebp], eax
	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv146[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>

; 847  : 		this->_Getal().construct(
; 848  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
	add	esp, 4
	mov	DWORD PTR tv147[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv148[ebp], eax
	lea	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv147[ebp]
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv148[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>

; 849  : 		this->_Getal().construct(
; 850  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	DWORD PTR tv150[ebp], eax
	lea	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv150[ebp]
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	jmp	SHORT $LN4@Buyheadnod
__catch$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0:

; 851  : 		_CATCH_ALL
; 852  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate

; 853  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 854  : 		_CATCH_END

	mov	eax, $LN7@Buyheadnod
	ret	0
$LN4@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1
$LN7@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1:

; 855  : 
; 856  : 		this->_Color(_Pnode) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 857  : 		this->_Isnil(_Pnode) = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 858  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buyheadnod:

; 859  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@Buyheadnod:
	DD	1
	DD	$LN10@Buyheadnod
$LN10@Buyheadnod:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN8@Buyheadnod
$LN8@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Buyheadnode
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Free_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -17						; size = 1
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 830  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 831  : 		typename _Alty::template rebind<_Container_proxy>::other
; 832  : 			_Alproxy(_Getal());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > > >

; 833  : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 834  : 		_Alproxy.destroy(this->_Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 835  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate

; 836  : 		this->_Myproxy = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 837  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Alloc_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -17						; size = 1
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 821  : 		{	// construct proxy from _Alnod

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 822  : 		typename _Alty::template rebind<_Container_proxy>::other
; 823  : 			_Alproxy(_Getal());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > > >

; 824  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 825  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 826  : 		this->_Myproxy->_Mycont = this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 827  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??1?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::~_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >, COMDAT
; _this$ = ecx

; 807  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 808  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Freeheadnode

; 809  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Free_proxy

; 810  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::~_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___formal$ = 8						; size = 4
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >, COMDAT
; _this$ = ecx

; 795  : 	_Tree_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		{	// construct allocators from _Al
; 797  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 798  : 		_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 799  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXXZ ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Alloc_proxy
	jmp	SHORT $LN4@Tree_alloc
__catch$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		_Freeheadnode(this->_Myhead);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Freeheadnode

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Tree_alloc
	ret	0
$LN4@Tree_alloc:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN2@Tree_alloc
$LN8@Tree_alloc:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@Tree_alloc:

; 804  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@Tree_alloc:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@UTelegram@@V?$allocator@UTelegram@@@std@@@std@@@std@@QAE@ABV?$allocator@UTelegram@@@1@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >::_Tree_alloc<0,std::_Tree_base_types<Telegram,std::allocator<Telegram> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::~_Tree_val<std::_Tree_simple_types<Telegram> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::~_Tree_val<std::_Tree_simple_types<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min, COMDAT

; 619  : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 620  : 		while (!_Isnil(_Left(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Min

; 621  : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Min
$LN1@Min:

; 622  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max, COMDAT

; 612  : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Max:

; 613  : 		while (!_Isnil(_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Max

; 614  : 			_Pnode = _Right(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Max
$LN1@Max:

; 615  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 616  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval, COMDAT

; 607  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 608  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H

; 609  : 		}

	pop	ebp
	ret	0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right, COMDAT

; 602  : 		{	// return reference to right pointer in node

	push	ebp
	mov	ebp, esp

; 603  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 604  : 		}

	pop	ebp
	ret	0
?_Right@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Right
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent, COMDAT

; 597  : 		{	// return reference to parent pointer in node

	push	ebp
	mov	ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 599  : 		}

	pop	ebp
	ret	0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Parent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left, COMDAT

; 592  : 		{	// return reference to left pointer in node

	push	ebp
	mov	ebp, esp

; 593  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 594  : 		}

	pop	ebp
	ret	0
?_Left@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Left
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil, COMDAT

; 587  : 		{	// return reference to nil flag in node

	push	ebp
	mov	ebp, esp

; 588  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 13					; 0000000dH

; 589  : 		}

	pop	ebp
	ret	0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color, COMDAT

; 582  : 		{	// return reference to color in node

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Color);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH

; 584  : 		}

	pop	ebp
	ret	0
?_Color@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAAADPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Color
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >, COMDAT
; _this$ = ecx

; 571  : 	_Tree_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 572  : 		{	// initialize data
; 573  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 574  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 575  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate

; 888  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate

; 877  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<Telegram,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<Telegram,void *> >::max_size

; 763  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 89478485				; 05555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_Tree_node<Telegram,void *> >
	add	esp, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UTelegram@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UTelegram@@@std@@QAE@XZ PROC		; std::allocator<Telegram>::allocator<Telegram>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UTelegram@@@std@@QAE@XZ ENDP		; std::allocator<Telegram>::allocator<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z PROC	; std::less<Telegram>::operator(), COMDAT
; _this$ = ecx

; 179  : 		{	// apply operator< to operands

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 		return (_Left < _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??M@YA_NABUTelegram@@0@Z		; operator<
	add	esp, 8

; 181  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ENDP	; std::less<Telegram>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z PROC ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn, COMDAT

; 33   : 		{	// extract key from element value

	push	ebp
	mov	ebp, esp

; 34   : 		return (_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 35   : 		}

	pop	ebp
	ret	0
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ENDP ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\telegram.h
;	COMDAT ??M@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??M@YA_NABUTelegram@@0@Z PROC				; operator<, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 77   :   if (t1 == t2)

	mov	eax, DWORD PTR _t2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	push	ecx
	call	??8@YA_NABUTelegram@@0@Z		; operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@operator

; 78   :   {
; 79   :     return false;

	xor	al, al
	jmp	SHORT $LN1@operator

; 80   :   }
; 81   : 
; 82   :   else

	jmp	SHORT $LN1@operator
$LN2@operator:

; 83   :   {
; 84   :     return  (t1.DispatchTime < t2.DispatchTime);

	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _t1$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jbe	SHORT $LN5@operator
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv72[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv72[ebp]
$LN1@operator:

; 85   :   }
; 86   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??M@YA_NABUTelegram@@0@Z ENDP				; operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\telegram.h
;	COMDAT ??8@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv88 = -8						; size = 8
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??8@YA_NABUTelegram@@0@Z PROC				; operator==, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 69   :   return ( fabs(t1.DispatchTime-t2.DispatchTime) < SmallestDelay) &&
; 70   :           (t1.Sender == t2.Sender)        &&
; 71   :           (t1.Receiver == t2.Receiver)    &&
; 72   :           (t1.Msg == t2.Msg);

	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR _t2$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	subsd	xmm0, QWORD PTR [ecx+16]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR _SmallestDelay
	comisd	xmm0, QWORD PTR tv88[ebp]
	jbe	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv79[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv79[ebp]

; 73   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8@YA_NABUTelegram@@0@Z ENDP				; operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\romain s\documents\workspace\workspace_ia\tp3ia\common\messaging\telegram.h
;	COMDAT ??0Telegram@@QAE@NHHHPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_info$ = 28						; size = 4
??0Telegram@@QAE@NHHHPAX@Z PROC				; Telegram::Telegram, COMDAT
; _this$ = ecx

; 55   :   {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sender$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _receiver$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _time$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Telegram@@QAE@NHHHPAX@Z ENDP				; Telegram::Telegram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -16						; size = 4
$T1 = -12						; size = 4
__Name$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -16						; size = 4
$T1 = -12						; size = 4
__Name$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 610  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp

; 611  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 612  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 613  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Ptr$3 = -8						; size = 4
_this$ = -4						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$3[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$3[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -56						; size = 4
tv204 = -52						; size = 4
tv203 = -48						; size = 4
tv202 = -44						; size = 4
$T2 = -39						; size = 1
$T3 = -38						; size = 1
$T4 = -37						; size = 1
__Ptr$ = -32						; size = 4
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+24]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+24], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@Copy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN23@Copy:
	DD	1
	DD	$LN22@Copy
$LN22@Copy:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@Copy
$LN20@Copy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T1 = -9						; size = 1
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);

	push	1143					; 00000477H
	push	OFFSET ??_C@_1IC@HLKMDAOL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign

; 1126 : 			_DEBUG_POINTER(_Ptr);

	push	1126					; 00000466H
	push	OFFSET ??_C@_1IC@HLKMDAOL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:

; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 1139 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 677  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 680  : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 681  : 		_Alproxy.destroy(this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 683  : 		this->_Myproxy = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 684  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 668  : 		{	// construct proxy from _Alval

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 671  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 673  : 		this->_Myproxy->_Mycont = this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 674  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 654  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 656  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 648  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 651  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 187  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 188  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 189  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me

; 190  : 			{	// adopted, remove self from list
; 191  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN3@Orphan_me:

; 192  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 193  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 194  : 
; 195  : 			if (*_Pnext == 0)

	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Orphan_me

; 196  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	196					; 000000c4H
	push	OFFSET ??_C@_1IE@MKNBBMEP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:

; 197  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 198  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 199  : 			}
; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 201  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 182  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 184  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 177  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 179  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 172  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 174  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 145  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		if (_Parent == 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN3@Adopt

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 149  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 150  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 151  : 		else

	jmp	SHORT $LN4@Adopt
$LN3@Adopt:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN4@Adopt

; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 159  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 161  : 				_Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 162  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 163  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN4@Adopt:

; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;
; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@Adopt:
	DD	2
	DD	$LN11@Adopt
$LN11@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN9@Adopt
$LN9@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN8@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 137  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 140  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iterator_b:
	DD	1
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 123  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		if (_Myproxy == _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@operator
	jmp	SHORT $LN3@operator
$LN4@operator:

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@operator

; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 128  : 		else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 131  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 132  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:

; 133  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 134  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@operator:
	DD	1
	DD	$LN10@operator
$LN10@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@operator
$LN8@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 118  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 119  : 		*this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 120  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 113  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 114  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -20						; size = 4
__Lock$2 = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 209  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 210  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 211  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all

; 212  : 		{	// proxy allocated, drain it
; 213  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 214  : 
; 215  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx

; 216  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Orphan_all

; 217  : 			(*_Pnext)->_Myproxy = 0;

	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 218  : 		_Myproxy->_Myfirstiter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 219  : 		}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:

; 220  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 221  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 98   : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 100  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 93   : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 95   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 79   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 80   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 67   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 68   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 1167 : 	static _Ty (max)() _THROW0()

	push	ebp
	mov	ebp, esp

; 1168 : 		{	// return maximum value
; 1169 : 		return (DBL_MAX);

	fld	QWORD PTR __real@7fefffffffffffff

; 1170 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 1162 : 	static _Ty (min)() _THROW0()

	push	ebp
	mov	ebp, esp

; 1163 : 		{	// return minimum value
; 1164 : 		return (DBL_MIN);

	fld	QWORD PTR __real@0010000000000000

; 1165 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 1100 : 	static _Ty (max)() _THROW0()

	push	ebp
	mov	ebp, esp

; 1101 : 		{	// return maximum value
; 1102 : 		return (FLT_MAX);

	fld	DWORD PTR __real@7f7fffff

; 1103 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 1095 : 	static _Ty (min)() _THROW0()

	push	ebp
	mov	ebp, esp

; 1096 : 		{	// return minimum value
; 1097 : 		return (FLT_MIN);

	fld	DWORD PTR __real@00800000

; 1098 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files\microsoft visual studio 11.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 678  : 	static _Ty (max)() _THROW0()

	push	ebp
	mov	ebp, esp

; 679  : 		{	// return maximum value
; 680  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 681  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
END
